from aiogram.filters.command import Command
from aiogram import F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ChatMemberUpdated
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter, IS_NOT_MEMBER, IS_MEMBER, KICKED, LEFT, RESTRICTED, ADMINISTRATOR, CREATOR
from aiogram.enums import ChatType
import bot.keyboards as kb
import bot.database as db
from bot.states import *
from bot.logger import error_handler, logger
from bot.config import Config
import re
import ast


router = Router()


@error_handler
@router.message(F.text, Command("start"))
async def start_loop(message: Message, state: FSMContext):
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        await db.add_group(message.chat.id, message.chat.title)
        try:
            await message.answer(f"–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –Ø - –≥–Ω–æ–º–∏–∫ –°—Ç—ë–ø–∞, –º–µ—Å—Ç–Ω—ã–π –∑–≤–æ–Ω–∞—Ä—å üßôüèª‚Äç‚ôÇÔ∏è\n–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É, –∞ –∑–Ω–∞—á–∏—Ç —Ç–µ–ø–µ—Ä—å —è —Å–º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—é–¥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–æ–∑–¥–∞–¥–∏—Ç–µ –≤ —á–∞—Ç–µ —Å–æ –º–Ω–æ–π!")
        except Exception as error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {message.chat.title}: {error}", exc_info=True)
    else:
        await message.answer("–Ø —Å–ª—ã—à—É —É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–ª–æ–∫–æ–ª, –æ–Ω –±–µ—Å–æ–≤ –¥—Ä–∞–∑–Ω–∏—Ç... üòú\n"
                            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–∫–æ–ª—å–Ω–µ–π –†–æ—É—Ç–∏–º–∞ ‚õ™Ô∏è\n"
                            "–Ø - –≥–Ω–æ–º–∏–∫ –°—Ç—ë–ø–∞, –º–µ—Å—Ç–Ω—ã–π –∑–≤–æ–Ω–∞—Ä—å üßôüèª‚Äç‚ôÇÔ∏è\n"
                            "–ò–º–µ–Ω–Ω–æ —è –Ω–∞–≤–æ–∂—É –ø–æ —É—Ç—Ä–∞–º —Å—É–µ—Ç—É –≤ –†–æ—É—Ç–∏–º–µ, –ø—Ä–æ–±—É–∂–¥–∞—è –æ—Ç —Å–Ω–∞ –∑–∞–∑–µ–≤–∞–≤—à–∏—Ö—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ü–µ–Ω–∏—Ç—å –Ω–µ–≤–µ–¥–æ–º–æ–µ –¢–ó üôÇ")
        if not await db.is_old(message.from_user.id):
            await state.set_state(Register_steps.fullname)
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –º–æ—ë –∏–º—è —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å.\n–í–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û:")
        else:
            user_fullname = await db.get_fullname(message.from_user.id)
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {user_fullname}!", reply_markup=await kb.get_main_menu_keyboard(message.from_user.id))


@router.message(Register_steps.fullname)
async def registration(message: Message, state: FSMContext):
    await state.update_data(fullname=message.text)
    register_data = await state.get_data()
    if re.match(r"^[–ê-–Ø–Å–∞-—è—ëA-Za-z]+(?:-[–ê-–Ø–Å–∞-—è—ëA-Za-z]+)?\s[–ê-–Ø–Å–∞-—è—ëA-Za-z]+(?:-[–ê-–Ø–Å–∞-—è—ëA-Za-z]+)?\s[–ê-–Ø–Å–∞-—è—ëA-Za-z]+(?:-[–ê-–Ø–Å–∞-—è—ëA-Za-z]+)?$", message.text):
        lastname, firstname, middlename = (register_data["fullname"]).split(" ")
        if await db.is_register(firstname, middlename, lastname):
            await db.update_user_id(message.from_user.id, firstname, middlename, lastname)
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {register_data['fullname']}!", reply_markup=await kb.get_main_menu_keyboard(message.from_user.id))
            await state.clear()
        else:
            await message.answer("–ú–æ–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –≤–≤–æ–¥–∏–ª —Ç–µ–±—è –≤ —Å–≤–æ–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ üòë")
    else:
        await message.answer("üò¨ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û!")
        await state.set_state(Register_steps.fullname)
        await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û:")


@router.message(F.text == "üè†–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –†–æ—É—Ç–∏–º–∞")
async def get_routeam_notifications(message: Message):
    if Config.is_admin(message.from_user.id):
        notifications_dict = await db.get_all_notifications()
        if len(notifications_dict) > 0:
            for notification_id, notification_data in notifications_dict.items():
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É recipients_ids –≤ —Å–ª–æ–≤–∞—Ä—å
                recipients_ids = ast.literal_eval(notification_data['recipients_ids'])
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                user_ids = recipients_ids.get('users', [])
                user_names = []
                for user_id in user_ids:
                    fullname = await db.get_fullname(user_id)
                    if fullname:
                        user_names.append(fullname)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã
                group_ids = recipients_ids.get('groups', [])
                group_names = []
                for group_id in group_ids:
                    group_name = await db.get_group_name(group_id)
                    if group_name:
                        group_names.append(group_name)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏
                recipients_str = ""
                if user_names:
                    recipients_str += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {', '.join(user_names)}\n"
                if group_names:
                    recipients_str += f"–ì—Ä—É–ø–ø—ã: {', '.join(group_names)}\n"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                notification_text = (
                    f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID: {notification_id}\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {notification_data['title']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {notification_data['description']}\n"
                    f"–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {notification_data['sender_date']}\n"
                    f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {notification_data['sender_time']}\n"
                    f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {'–î–∞' if notification_data['is_repeat'] else '–ù–µ—Ç'}\n"
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if notification_data['sender_weekday'] != "None":
                    notification_text += f"–î–Ω–∏ –Ω–µ–¥–µ–ª–∏: {notification_data['sender_weekday']}\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                notification_text += f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {recipients_str if recipients_str else '–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π'}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
                await message.answer(notification_text, reply_markup=await kb.get_edit_notification_keyboard(notification_id))
        else:
            await message.answer("–í–∞—à –≤–µ—Ä–Ω—ã–π —Å–ª—É–≥–∞ —Å–∏–¥–∏—Ç –±–µ–∑ —Ä–∞–±–æ—Ç—ãüòî\n–í –º–æ—ë–º –±–ª–æ–∫–Ω–æ—Ç–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö")


@router.message(F.text == "üßëüèª‚Äçüíª–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def get_user_notifications(message: Message):
    if Config.is_admin(message.from_user.id):
        notifications_dict = await db.get_author_notifications(message.from_user.id)
        if len(notifications_dict) > 0:
            for notification_id, notification_data in notifications_dict.items():
                recipients_ids = ast.literal_eval(notification_data['recipients_ids'])
                user_ids = recipients_ids.get('users', [])
                user_names = []
                for user_id in user_ids:
                    fullname = await db.get_fullname(user_id)
                    if fullname:
                        user_names.append(fullname)
                
                group_ids = recipients_ids.get('groups', [])
                group_names = []
                for group_id in group_ids:
                    group_name = await db.get_group_name(group_id)
                    if group_name:
                        group_names.append(group_name)
                
                recipients_str = ""
                if user_names:
                    recipients_str += f"{', '.join(user_names)}\n"
                if group_names:
                    recipients_str += f"{', '.join(group_names)}\n"
                
                notification_text = (
                    f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID: {notification_id}\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {notification_data['title']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {notification_data['description']}\n"
                    f"–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {notification_data['sender_date']}\n"
                    f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {notification_data['sender_time']}\n"
                    f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {'–î–∞' if notification_data['is_repeat'] else '–ù–µ—Ç'}\n"
                )

                if notification_data['sender_weekday'] != "None":
                    notification_text += f"–î–Ω–∏ –Ω–µ–¥–µ–ª–∏: {notification_data['sender_weekday']}\n"

                notification_text += f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {recipients_str if recipients_str else '–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π'}"
                
                await message.answer(notification_text, reply_markup=await kb.get_edit_notification_keyboard(notification_id))
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–πü§î")


@router.message(F.text == "üë•–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –≥—Ä—É–ø–ø—ã")
async def get_user_notifications(message: Message, state: FSMContext):
    if Config.is_admin(message.from_user.id):
        users_dict = await db.get_all_users_dict()
        groups_dict = await db.get_all_groups()

        if not users_dict:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", reply_markup=await kb.get_users_list_keyboard())

        if not groups_dict:
            await message.answer("–ú–µ–Ω—è –Ω–µ—Ç –µ—â—ë –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ")
        else:
            await message.answer("–ì—Ä—É–ø–ø—ã:", reply_markup=await kb.get_groups_list_keyboard())


@router.message(F.text == "üîî–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def create_notification(message: Message, state: FSMContext):
    await state.set_state(Notification_create_steps.title)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reply_markup=await kb.remove_keyboard())


@router.message(Notification_create_steps.title)
async def set_notification_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(Notification_create_steps.description)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reply_markup=await kb.remove_keyboard())


@router.message(Notification_create_steps.description)
async def set_notification_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(Notification_create_steps.sender_date)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reply_markup=await kb.remove_keyboard())


@router.message(Notification_create_steps.sender_date)
async def set_notification_sender_date(message: Message, state: FSMContext):
    if re.match(r"^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.\d{4}$", message.text):
        await state.update_data(sender_date=message.text)
        await state.set_state(Notification_create_steps.sender_time)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reply_markup=await kb.get_time_keyboard())
    else:
        await state.set_state(Notification_create_steps.sender_date)
        await message.answer("üò¨ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


@router.message(Notification_create_steps.sender_time)
async def set_notification_sender_time(message: Message, state: FSMContext):
    if re.match(r"^([01]?[0-9]|2[0-3]):[0-5][0-9]$", message.text):
        await state.update_data(sender_time=message.text)
        await state.set_state(Notification_create_steps.is_repeat)
        await message.answer("–ù—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?", reply_markup=await kb.get_confirm_keyboard())
    else:
        await state.set_state(Notification_create_steps.sender_time)
        await message.answer("üò¨ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")


@router.message(Notification_create_steps.is_repeat)
async def set_notification_repeat(message: Message, state: FSMContext):
    if message.text == "–î–∞":
        await state.update_data(is_repeat=True)
        await state.set_state(Notification_create_steps.sender_weekday)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", reply_markup=await kb.get_weekdays_keyboard())
        await message.answer('–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"', reply_markup=await kb.get_continue_keyboard())
    elif message.text == "–ù–µ—Ç":
        await state.update_data(is_repeat=False)
        await state.update_data(sender_weekday=None)
        await state.set_state(Notification_create_steps.recipient_type)
        await message.answer("–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?", reply_markup=await kb.get_recipient_type_keyboard())
    else:
        await state.set_state(Notification_create_steps.is_repeat)
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", reply_markup=await kb.get_confirm_keyboard())


@router.message(Notification_create_steps.sender_weekday, F.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def handle_weekday_continue(message: Message, state: FSMContext):
    data = await state.get_data()
    selected_weekdays = data.get("selected_weekdays", [])

    if not selected_weekdays:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏!")
        return

    await state.update_data(sender_weekday=selected_weekdays)

    await state.set_state(Notification_create_steps.recipient_type)
    await message.answer("–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?", reply_markup=await kb.get_recipient_type_keyboard())

@router.callback_query(F.data.startswith("weekday_"))
async def handle_weekday_selection(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_weekdays = data.get("selected_weekdays", [])

    weekday = callback.data.split("_")[1]

    if weekday in selected_weekdays:
        selected_weekdays.remove(weekday)
    else:
        selected_weekdays.append(weekday)

    current_keyboard = callback.message.reply_markup.inline_keyboard

    new_keyboard = []
    for row in current_keyboard:
        new_row = []
        for button in row:
            button_text = button.text
            button_data = button.callback_data

            if button_data == f"weekday_{weekday}":
                if weekday in selected_weekdays:
                    button_text = f"{button_text} ‚úÖ"
                else:
                    button_text = button_text.replace(" ‚úÖ", "")

            new_row.append(InlineKeyboardButton(text=button_text, callback_data=button_data))
        new_keyboard.append(new_row)

    await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=new_keyboard))

    await state.update_data(selected_weekdays=selected_weekdays)
    await callback.answer()


@router.callback_query(F.data.startswith("notification_user_"))
async def handle_user_selection(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    selected_users = data.get("selected_users", [])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω
    if user_id in selected_users:
        selected_users.remove(user_id)  # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    else:
        selected_users.append(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(selected_users=selected_users)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–∞–∑–º–µ—Ç–∫—É
    current_keyboard = callback.message.reply_markup.inline_keyboard

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–∑–º–µ—Ç–∫—É
    new_keyboard = []
    for row in current_keyboard:
        new_row = []
        for button in row:
            button_text = button.text
            button_data = button.callback_data

            # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º/—É–±–∏—Ä–∞–µ–º ‚úÖ
            if button_data == f"notification_user_{user_id}":
                if user_id in selected_users:
                    button_text = f"{button_text} ‚úÖ"
                else:
                    button_text = button_text.replace(" ‚úÖ", "")

            new_row.append(InlineKeyboardButton(text=button_text, callback_data=button_data))
        new_keyboard.append(new_row)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞
    if new_keyboard != current_keyboard:
        await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=new_keyboard))
    else:
        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()

    await callback.answer()


@router.callback_query(F.data.startswith("notification_group_"))
async def handle_group_selection(callback: CallbackQuery, state: FSMContext):
    group_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    selected_groups = data.get("selected_groups", [])

    if group_id in selected_groups:
        selected_groups.remove(group_id)
    else:
        selected_groups.append(group_id)

    await state.update_data(selected_groups=selected_groups)

    current_keyboard = callback.message.reply_markup.inline_keyboard
    new_keyboard = []
    for row in current_keyboard:
        new_row = []
        for button in row:
            button_text = button.text
            button_data = button.callback_data

            if button_data == f"notification_group_{group_id}":
                if group_id in selected_groups:
                    button_text = f"{button_text} ‚úÖ"
                else:
                    button_text = button_text.replace(" ‚úÖ", "")

            new_row.append(InlineKeyboardButton(text=button_text, callback_data=button_data))
        new_keyboard.append(new_row)

    await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=new_keyboard))
    await callback.answer()


@router.message(Notification_create_steps.recipient_type, F.text == "–í –≥—Ä—É–ø–ø—É")
async def handle_group_recipient(message: Message, state: FSMContext):
    await state.update_data(recipient_type="–í –≥—Ä—É–ø–ø—É")
    await state.set_state(Notification_create_steps.recipients_ids)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reply_markup=await kb.get_notification_groups_list_keyboard())
    await message.answer('–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å"', reply_markup=await kb.get_create_keyboard())


@router.message(Notification_create_steps.recipient_type, F.text == "–í –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
async def handle_user_recipient(message: Message, state: FSMContext):
    await state.update_data(recipient_type="–í –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    await state.set_state(Notification_create_steps.recipients_ids)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reply_markup=await kb.get_notification_users_list_keyboard())
    await message.answer('–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å"', reply_markup=await kb.get_create_keyboard())
    

@router.callback_query(F.data.startswith("user_"))
async def handle_user_selection(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    if user_id == callback.from_user.id:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
        return
    await callback.message.edit_reply_markup(reply_markup=await kb.get_user_actions_keyboard(user_id))
    await callback.answer()


@router.callback_query(F.data.startswith("delete_user_"))
async def handle_delete_user(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[2])
    await db.delete_user(user_id)
    await callback.message.edit_reply_markup(reply_markup=await kb.get_users_list_keyboard())
    await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–µ–Ω.")


@router.callback_query(F.data.startswith("spare_user_"))
async def handle_spare_user(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[2])
    await callback.message.edit_reply_markup(reply_markup=await kb.get_users_list_keyboard())
    await callback.answer(f"–í—ã –ø–æ—â–∞–¥–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.")
    

@router.message(Notification_create_steps.recipients_ids, F.text == "–°–æ–∑–¥–∞—Ç—å")
async def handle_recipients_continue(message: Message, state: FSMContext):
    data = await state.get_data()
    selected_users = data.get("selected_users", [])
    selected_groups = data.get("selected_groups", [])
    recipient_type = data.get("recipient_type", "")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω
    if not selected_users and not selected_groups:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è!")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏
    await state.update_data(recipients_ids={"users": selected_users, "groups": selected_groups})

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    notification_data_str = (
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {data['title']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {data['sender_date']}\n"
        f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {data['sender_time']}\n"
    )

    if data['is_repeat']:
        notification_data_str += f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏: {', '.join(data['sender_weekday'])}\n"

    if recipient_type == "–í –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è":
        users_names = [await db.get_user_name(user_id) for user_id in selected_users]
        notification_data_str += f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_names}\n"
    elif recipient_type == "–í –≥—Ä—É–ø–ø—É":
        group_names = [await db.get_group_name(group_id) for group_id in selected_groups]
        group_names_str = ", ".join(group_names)
        notification_data_str += f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {group_names_str}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
    await message.answer(notification_data_str, reply_markup=await kb.get_main_menu_keyboard(message.from_user.id))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.add_notification(
        author_id=message.from_user.id,
        title=data['title'],
        description=data['description'],
        sender_date=data['sender_date'],
        sender_time=data['sender_time'],
        is_repeat=data['is_repeat'],
        sender_weekday=data['sender_weekday'],
        recipients_ids={"users": selected_users, "groups": selected_groups},
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.callback_query(F.data.startswith("delete_notification_"))
async def handle_delete_notification(callback: CallbackQuery):
    notification_id = int(callback.data.split("_")[2])
    await db.delete_notification(notification_id)
    await callback.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {notification_id} —É–¥–∞–ª–µ–Ω–æ.")
    await callback.message.delete()


    